// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  receipts      Receipt[]
  vehicles      Vehicle[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model WaitingList {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("waiting_list")
}

model Vehicle {
  id String @id @default(cuid())

  // Vehicle fields
  licensePlate String
  make         String // e.g., "Toyota"
  model        String // e.g., "Corolla 2020"
  color        String? // Optional, e.g., "Branco"
  slug         String  @unique // URL-friendly identifier for QR codes

  // Audit fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  receipts Receipt[]

  // Indexes and constraints
  @@unique([licensePlate])
  @@index([userId])
  @@index([slug])
  @@index([deletedAt])
  @@map("vehicle")
}

model Receipt {
  id String @id @default(cuid())

  // Business fields
  clientName  String
  origin      String
  destination String
  distance    Float?
  amount      Decimal       @db.Decimal(10, 2)
  status      ReceiptStatus @default(COMPLETED)
  notes       String?

  // Date and time fields
  tripDate DateTime
  tripTime String // Format: "HH:MM"

  // Audit fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([vehicleId])
  @@index([tripDate])
  @@index([status])
  @@index([deletedAt])
  @@map("receipt")
}

enum ReceiptStatus {
  PENDING
  COMPLETED
  CANCELLED

  @@map("receipt_status")
}
